package qr

type EncodeType int

const (
	EncodeTypeNumeric      EncodeType = 0b0001
	EncodeTypeAlphaNumeric EncodeType = 0b0010
	EncodeTypeByte         EncodeType = 0b0100
)

type Version int

type ErrorCorrectionLevel int

const (
	ErrorCorrectionLevelL ErrorCorrectionLevel = 0x1
	ErrorCorrectionLevelM ErrorCorrectionLevel = 0x0
	ErrorCorrectionLevelQ ErrorCorrectionLevel = 0x3
	ErrorCorrectionLevelH ErrorCorrectionLevel = 0x2
)

var (
	// idx 0 == version 7
	versions = []int{
		0b000010011110100110,
		0b010001011100111000,
		0b110111011000000100,
		0b101001111110000000,
		0b001111111010111100,
		0b001101100100011010,
		0b101011100000100110,
		0b110101000110100010,
		0b010011000010011110,
		0b011100010001011100,
		0b111010010101100000,
		0b100100110011100100,
		0b000010110111011000,
		0b000000101001111110,
		0b100110101101000010,
		0b111000001011000110,
		0b011110001111111010,
		0b001101001101100100,
		0b101011001001011000,
		0b110101101111011100,
		0b010011101011100000,
		0b010001110101000110,
		0b110111110001111010,
		0b101001010111111110,
		0b001111010011000010,
		0b101000011000101101,
		0b001110011100010001,
		0b010000111010010101,
		0b110110111110101001,
		0b110100100000001111,
		0b010010100100110011,
		0b001100000010110111,
		0b101010000110001011,
		0b111001000100010101,
	}

	alignmentPositions = [][]int{
		{}, {18}, {22}, {26}, {30}, {34}, {6, 22, 38}, {6, 24, 42},
		{6, 26, 46}, {6, 28, 50}, {6, 30, 54}, {6, 32, 58}, {6, 34, 62},
		{6, 26, 46, 66}, {6, 26, 48, 70}, {6, 26, 50, 74}, {6, 30, 54, 78}, {6, 30, 56, 82},
		{6, 30, 58, 86}, {6, 34, 62, 90}, {6, 28, 50, 72, 94}, {6, 26, 50, 74, 98}, {6, 30, 54, 78, 102},
		{6, 28, 54, 80, 106}, {6, 32, 58, 84, 110}, {6, 30, 58, 86, 114}, {6, 34, 62, 90, 118}, {6, 26, 50, 74, 98, 122},
		{6, 30, 54, 78, 102, 126}, {6, 26, 52, 78, 104, 130}, {6, 30, 56, 82, 108, 134}, {6, 34, 60, 86, 112, 138},
		{6, 30, 58, 86, 114, 142}, {6, 34, 62, 90, 118, 146}, {6, 30, 54, 78, 102, 126, 150}, {6, 24, 50, 76, 102, 128, 154},
		{6, 28, 54, 80, 106, 132, 158}, {6, 32, 58, 84, 110, 136, 162}, {6, 26, 54, 82, 110, 138, 166}, {6, 30, 58, 86, 114, 142, 170},
	}

	correctionBytes = map[int][]byte{
		7:  {87, 229, 146, 149, 238, 102, 21},
		10: {251, 67, 46, 61, 118, 70, 64, 94, 32, 45},
		13: {74, 152, 176, 100, 86, 100, 106, 104, 130, 218, 206, 140, 78},
		15: {8, 183, 61, 91, 202, 37, 51, 58, 58, 237, 140, 124, 5, 99, 105},
		16: {120, 104, 107, 109, 102, 161, 76, 3, 91, 191, 147, 169, 182, 194, 225, 120},
		17: {43, 139, 206, 78, 43, 239, 123, 206, 214, 147, 24, 99, 150, 39, 243, 163, 136},
		18: {215, 234, 158, 94, 184, 97, 118, 170, 79, 187, 152, 148, 252, 179, 5, 98, 96, 153},
		20: {17, 60, 79, 50, 61, 163, 26, 187, 202, 180, 221, 225, 83, 239, 156, 164, 212, 212, 188, 190},
		22: {210, 171, 247, 242, 93, 230, 14, 109, 221, 53, 200, 74, 8, 172, 98, 80, 219, 134, 160, 105, 165, 231},
		24: {229, 121, 135, 48, 211, 117, 251, 126, 159, 180, 169, 152, 192, 226, 228, 218, 111, 0, 117, 232, 87, 96, 227, 21},
		26: {173, 125, 158, 2, 103, 182, 118, 17, 145, 201, 111, 28, 165, 53, 161, 21, 245, 142, 13, 102, 48, 227, 153, 145, 218, 70},
		28: {168, 223, 200, 104, 224, 234, 108, 180, 110, 190, 195, 147, 205, 27, 232, 201, 21, 43, 245, 87, 42, 195, 212, 119, 242, 37, 9, 123},
		30: {41, 173, 145, 152, 216, 31, 179, 182, 50, 48, 110, 86, 239, 96, 222, 125, 42, 173, 226, 193, 224, 130, 156, 37, 251, 216, 238, 40, 192, 180},
	}

	correctionBytesValues = map[ErrorCorrectionLevel][]int{
		ErrorCorrectionLevelL: correctionBytesL,
		ErrorCorrectionLevelM: correctionBytesM,
		ErrorCorrectionLevelQ: correctionBytesQ,
		ErrorCorrectionLevelH: correctionBytesH,
	}

	correctionBytesL = []int{
		7, 10, 15, 20, 26, 18, 20, 24, 30, 18,
		20, 24, 26, 30, 22, 24, 28, 30, 28, 28,
		28, 28, 30, 30, 26, 28, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	}

	correctionBytesM = []int{
		10, 16, 26, 18, 24, 16, 18, 22, 22, 26,
		30, 22, 22, 24, 24, 28, 28, 26, 26, 26,
		26, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	}
	correctionBytesQ = []int{
		13, 22, 18, 26, 18, 24, 18, 22, 20, 24,
		28, 26, 24, 20, 30, 24, 28, 28, 26, 30,
		28, 30, 30, 30, 30, 28, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	}
	correctionBytesH = []int{
		17, 28, 22, 16, 22, 28, 26, 26, 24, 28,
		24, 28, 22, 24, 24, 30, 28, 28, 26, 28,
		30, 24, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	}

	blocksValues = map[ErrorCorrectionLevel][]int{
		ErrorCorrectionLevelL: blocksL,
		ErrorCorrectionLevelM: blocksM,
		ErrorCorrectionLevelQ: blocksQ,
		ErrorCorrectionLevelH: blocksH,
	}

	blocksL = []int{
		1, 1, 1, 1, 1, 2, 2, 2, 2, 4,
		4, 4, 4, 4, 6, 6, 6, 6, 7, 8,
		8, 9, 9, 10, 12, 12, 12, 13, 14, 15,
		16, 17, 18, 19, 19, 20, 21, 22, 24, 25,
	}
	blocksM = []int{
		1, 1, 1, 2, 2, 4, 4, 4, 5, 5,
		5, 8, 9, 9, 10, 10, 11, 13, 14, 16,
		17, 17, 18, 20, 21, 23, 25, 26, 28, 29,
		31, 33, 35, 37, 38, 40, 43, 45, 47, 49,
	}
	blocksQ = []int{
		1, 1, 2, 2, 4, 4, 6, 6, 8, 8,
		8, 10, 12, 16, 12, 17, 16, 18, 21, 20,
		23, 23, 25, 27, 29, 34, 34, 35, 38, 40,
		43, 45, 48, 51, 53, 56, 59, 62, 65, 68,
	}
	blocksH = []int{
		1, 1, 2, 4, 4, 4, 5, 6, 8, 8,
		11, 11, 16, 16, 18, 16, 19, 21, 25, 25,
		25, 34, 30, 32, 35, 37, 40, 42, 45, 48,
		51, 54, 57, 60, 63, 66, 70, 74, 77, 81,
	}

	maskValues = map[ErrorCorrectionLevel][]int{
		ErrorCorrectionLevelL: masksL,
		ErrorCorrectionLevelM: masksM,
		ErrorCorrectionLevelQ: masksQ,
		ErrorCorrectionLevelH: masksH,
	}

	masksL = []int{0b111011111000100, 0b111001011110011, 0b111110110101010, 0b111100010011101, 0b110011000101111, 0b110001100011000, 0b110110001000001, 0b110100101110110}
	masksM = []int{0b101010000010010, 0b101000100100101, 0b101111001111100, 0b101101101001011, 0b100010111111001, 0b100000011001110, 0b100111110010111, 0b100101010100000}
	masksQ = []int{0b011010101011111, 0b011000001101000, 0b011111100110001, 0b011101000000110, 0b010010010110100, 0b010000110000011, 0b010111011011010, 0b010101111101101}
	masksH = []int{0b001011010001001, 0b001001110111110, 0b001110011100111, 0b001100111010000, 0b000011101100010, 0b000001001010101, 0b000110100001100, 0b000100000111011}

	maxBitsValues = map[ErrorCorrectionLevel][]int{
		ErrorCorrectionLevelL: maxBitsL,
		ErrorCorrectionLevelM: maxBitsM,
		ErrorCorrectionLevelQ: maxBitsQ,
		ErrorCorrectionLevelH: maxBitsH,
	}

	maxBitsL = []int{
		152, 272, 440, 640, 864, 1088, 1248, 1552,
		1856, 2192, 2592, 2960, 3424, 3688, 4184, 4712,
		5176, 5768, 6360, 6888, 7456, 8048, 8752, 9392,
		10208, 10960, 11744, 12248, 13048, 13880, 14744, 15640,
		16568, 17528, 18448, 19472, 20528, 21616, 22496, 23648,
	}

	maxBitsM = []int{
		128, 224, 352, 512, 688, 864, 992, 1232,
		1456, 1728, 2032, 2320, 2672, 2920, 3320, 3624,
		4056, 4504, 5016, 5352, 5712, 6256, 6880, 7312,
		8000, 8496, 9024, 9544, 10136, 10984, 11640, 12328,
		13048, 13800, 14496, 15312, 15936, 16816, 17728, 18672,
	}

	maxBitsQ = []int{
		104, 176, 272, 384, 496, 608, 704, 880,
		1056, 1232, 1440, 1648, 1952, 2088, 2360, 2600,
		2936, 3176, 3560, 3880, 4096, 4544, 4912, 5312,
		5744, 6032, 6464, 6968, 7288, 7880, 8264, 8920,
		9368, 9848, 10288, 10832, 11408, 12016, 12656, 13328,
	}

	maxBitsH = []int{
		72, 128, 208, 288, 368, 480, 528, 688,
		800, 976, 1120, 1264, 1440, 1576, 1784, 2024,
		2264, 2504, 2728, 3080, 3248, 3536, 3712, 4112,
		4304, 4768, 5024, 5288, 5608, 5960, 6344, 6760,
		7208, 7688, 7888, 8432, 8768, 9136, 9776, 10208,
	}
)

func calcVersion(level ErrorCorrectionLevel, dataLen int) int {
	for i, v := range maxBitsValues[level] {
		if v >= dataLen {
			return i + 1
		}
	}

	return -1
}

func getLengthFieldSize(encodeType EncodeType, version int) int {
	switch encodeType {
	case EncodeTypeNumeric:
		if version <= 9 {
			return 10
		}
		if version <= 26 {
			return 12
		}
		return 14
	case EncodeTypeAlphaNumeric:
		if version <= 9 {
			return 9
		}
		if version <= 26 {
			return 11
		}
		return 13
	case EncodeTypeByte:
		if version <= 9 {
			return 8
		}
		return 16
	}

	return -1
}
